# PHP CircleCI 2.0 configuration file
#
# Check https://circleci.com/docs/2.0/language-php/ for more details
#

version: 2
jobs:
  build:
    docker:
      # Specify the version you desire here
      - image: circleci/php:7.1-node-browsers

      # Specify service dependencies here if necessary
      # CircleCI maintains a library of pre-built images
      # documented at https://circleci.com/docs/2.0/circleci-images/
      # Using the RAM variation mitigates I/O contention
      # for database intensive operations.
      # - image: circleci/mysql:5.7-ram
      #
      # - image: redis:2.8.19

    steps:
      - restore_cache:
          keys:
            - source-v1-{{ .Branch }}-{{ .Revision }}
            - source-v1-{{ .Branch }}-
            - source-v1-

      - checkout

      - save_cache:
          key: source-v1-{{ .Branch }}-{{ .Revision }}
          paths:
            - .git

      - run: sudo apt update # PHP CircleCI 2.0 Configuration File# PHP CircleCI 2.0 Configuration File sudo apt install zlib1g-dev libsqlite3-dev

      # Download and cache dependencies
      - restore_cache:
          keys:
            # "composer.lock" can be used if it is committed to the repo
            - v1-dependencies-{{ checksum "composer.json" }}
            # fallback to using the latest cache if no exact match is found
            - v1-dependencies-

      - run: composer install -n --prefer-dist

      - save_cache:
          key: v1-dependencies-{{ checksum "composer.json" }}
          paths:
            - ~/themes/${THEME}/vendor

      - run: vendor/bin/phpcs --standard=WordPress-VIP-Go -sp --basepath=. --ignore=vendor *

      - restore_cache:
          keys:
            - node-v1-{{ checksum "package.json" }}
            - node-v1-

      - run: npm install

      - save_cache:
          key: node-v1-{{ checksum "package.json" }}
          paths:
            - ~/themes/${THEME}/node_modules

      - run: npm run prod
  deploy:
    machine:
      enabled: true
    steps:
      - run:
          name: Deploy Over SFTP
          command: |
            if [ "${CIRCLE_BRANCH}" = "develop" ]
            then
              echo 'export FTP_USERNAME=$FTP_USERNAME_DEV' >> $BASH_ENV
              echo 'export FTP_PASSWORD=$FTP_PASSWORD_DEV' >> $BASH_ENV
              echo 'export FTP_HOST=$FTP_HOST_DEV' >> $BASH_ENV
              echo 'export FTP_PORT=$FTP_PORT_DEV' >> $BASH_ENV
              echo 'export FTP_REMOTE_ROOT=$FTP_REMOTE_ROOT_DEV' >> $BASH_ENV
            fi
            node .circleci/deploy.js
            echo "We are online!"
workflows:
  version: 2
  deploy:
    jobs:
      - build:
      - deploy:
          requires:
            - build
          filters:
            branches:
              only:
                - master
                - develop
